// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: protobuf/service.proto

package protobuf

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
// const _ = grpc.SupportPackageIsVersion9

const (
	StashDBService_CreateBucket_FullMethodName  = "/stashDB.StashDBService/CreateBucket"
	StashDBService_Get_FullMethodName           = "/stashDB.StashDBService/Get"
	StashDBService_Set_FullMethodName           = "/stashDB.StashDBService/Set"
	StashDBService_Delete_FullMethodName        = "/stashDB.StashDBService/Delete"
	StashDBService_GetAllBuckets_FullMethodName = "/stashDB.StashDBService/GetAllBuckets"
	StashDBService_GetAllKeys_FullMethodName    = "/stashDB.StashDBService/GetAllKeys"
)

// StashDBServiceClient is the client API for StashDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StashDBServiceClient interface {
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAllBuckets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllBucketsResponse, error)
	GetAllKeys(ctx context.Context, in *GetAllKeysRequest, opts ...grpc.CallOption) (*GetAllKeysResponse, error)
}

type stashDBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStashDBServiceClient(cc grpc.ClientConnInterface) StashDBServiceClient {
	return &stashDBServiceClient{cc}
}

func (c *stashDBServiceClient) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, StashDBService_CreateBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stashDBServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, StashDBService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stashDBServiceClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, StashDBService_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stashDBServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, StashDBService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stashDBServiceClient) GetAllBuckets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllBucketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllBucketsResponse)
	err := c.cc.Invoke(ctx, StashDBService_GetAllBuckets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stashDBServiceClient) GetAllKeys(ctx context.Context, in *GetAllKeysRequest, opts ...grpc.CallOption) (*GetAllKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllKeysResponse)
	err := c.cc.Invoke(ctx, StashDBService_GetAllKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StashDBServiceServer is the server API for StashDBService service.
// All implementations must embed UnimplementedStashDBServiceServer
// for forward compatibility.
type StashDBServiceServer interface {
	CreateBucket(context.Context, *CreateBucketRequest) (*empty.Empty, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Set(context.Context, *SetRequest) (*empty.Empty, error)
	Delete(context.Context, *DeleteRequest) (*empty.Empty, error)
	GetAllBuckets(context.Context, *empty.Empty) (*GetAllBucketsResponse, error)
	GetAllKeys(context.Context, *GetAllKeysRequest) (*GetAllKeysResponse, error)
	mustEmbedUnimplementedStashDBServiceServer()
}

// UnimplementedStashDBServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStashDBServiceServer struct{}

func (UnimplementedStashDBServiceServer) CreateBucket(context.Context, *CreateBucketRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedStashDBServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStashDBServiceServer) Set(context.Context, *SetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedStashDBServiceServer) Delete(context.Context, *DeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStashDBServiceServer) GetAllBuckets(context.Context, *empty.Empty) (*GetAllBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBuckets not implemented")
}
func (UnimplementedStashDBServiceServer) GetAllKeys(context.Context, *GetAllKeysRequest) (*GetAllKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllKeys not implemented")
}
func (UnimplementedStashDBServiceServer) mustEmbedUnimplementedStashDBServiceServer() {}
func (UnimplementedStashDBServiceServer) testEmbeddedByValue()                        {}

// UnsafeStashDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StashDBServiceServer will
// result in compilation errors.
type UnsafeStashDBServiceServer interface {
	mustEmbedUnimplementedStashDBServiceServer()
}

func RegisterStashDBServiceServer(s grpc.ServiceRegistrar, srv StashDBServiceServer) {
	// If the following call pancis, it indicates UnimplementedStashDBServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StashDBService_ServiceDesc, srv)
}

func _StashDBService_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StashDBServiceServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StashDBService_CreateBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StashDBServiceServer).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StashDBService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StashDBServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StashDBService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StashDBServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StashDBService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StashDBServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StashDBService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StashDBServiceServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StashDBService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StashDBServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StashDBService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StashDBServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StashDBService_GetAllBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StashDBServiceServer).GetAllBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StashDBService_GetAllBuckets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StashDBServiceServer).GetAllBuckets(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StashDBService_GetAllKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StashDBServiceServer).GetAllKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StashDBService_GetAllKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StashDBServiceServer).GetAllKeys(ctx, req.(*GetAllKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StashDBService_ServiceDesc is the grpc.ServiceDesc for StashDBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StashDBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stashDB.StashDBService",
	HandlerType: (*StashDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBucket",
			Handler:    _StashDBService_CreateBucket_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StashDBService_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _StashDBService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StashDBService_Delete_Handler,
		},
		{
			MethodName: "GetAllBuckets",
			Handler:    _StashDBService_GetAllBuckets_Handler,
		},
		{
			MethodName: "GetAllKeys",
			Handler:    _StashDBService_GetAllKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/service.proto",
}
