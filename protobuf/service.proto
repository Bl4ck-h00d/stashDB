syntax = "proto3";


import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";



package stashDB;

option go_package="github.com/Bl4ck-h00d/stashdb/protobuf";


service StashDBService {

    rpc CreateBucket (CreateBucketRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/buckets"
            body: "*"
        };
    }

    rpc Get (GetRequest) returns (GetResponse) {
        option (google.api.http) = {
            get: "/v1/data/{bucket=*}/{key=*}"
        };
    }

    rpc Set (SetRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/data/{bucket=*}"
            body: "*"
        };
    }

    rpc Delete (DeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/data/{bucket=*}/{key=*}"
        };
    }

    rpc GetAllBuckets (google.protobuf.Empty) returns (GetAllBucketsResponse) {
        option (google.api.http) = {
            get: "/v1/buckets"
        };
    }

    rpc GetAllKeys (GetAllKeysRequest) returns (GetAllKeysResponse) {
        option (google.api.http) = {
            get: "/v1/data/{bucket=*}"
        };
    }

    rpc HeartbeatCheck (google.protobuf.Empty) returns (HeartbeatCheckResponse) {
        option (google.api.http) = {
            get: "/v1/heartbeat"
        };
    }

    rpc Join(JoinRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/cluster/{id}"
            body: "*"
        };
    }

    rpc Leave(LeaveRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/cluster/{id}"
        };
    }

    rpc Node(google.protobuf.Empty) returns (NodeResponse) {
        option (google.api.http)={
            get: "v1/node"
        };
    }

    rpc Cluster(google.protobuf.Empty) returns (ClusterResponse) {
        option (google.api.http) = {
            get: "v1/cluster"
        };
    }


    rpc Watch (google.protobuf.Empty) returns (stream WatchResponse) {}

}


message CreateBucketRequest {
    string name = 1;
}

message GetRequest {
    string key = 1;
    string bucket=2;
}

message GetResponse {
    bytes value = 1;
}

message SetRequest {
    string key = 1;
    string value = 2;
    string bucket = 3;
}


message DeleteRequest {
    string key = 1;
    string bucket=2;
}

message GetAllBucketsResponse {
    repeated string buckets=1;
}

message GetAllKeysRequest {
    string bucket=1;
    int64 limit=2;
}

message GetAllKeysResponse {
    map<string,bytes> pairs=1;
}

enum EventType {
    Unknown=0;
    Join=1;
    Leave=2;
    Set=3;
    Create=4;
    Delete=5;
}

message Event {
    EventType type = 1;
    google.protobuf.Any message=2;
}

message HeartbeatCheckResponse {
    bool alive=1;
}

message Metadata {
    string grpcAddress=1;
    string httpAddress=2;
}

message SetMetadataRequest {
    string id=1;
    Metadata metadata=2;
}

message DeleteMetadataRequest {
    string id=1;
}

message Node {
    string raftAddress=1;
    Metadata metadata=2;
    string state=3;
}

message NodeResponse {
    Node node=1;
}

message Cluster {
    map<string,Node> nodes=1;
    string leader=2;
}

message ClusterResponse {
    Cluster cluster=1;
}

message JoinRequest {
    string id=1;
    Node node=2;
}

message LeaveRequest {
    string id=1;
}



message WatchResponse {
    Event event=1;
}