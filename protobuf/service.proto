syntax = "proto3";


import "google/api/annotations.proto";
import "google/protobuf/empty.proto";


package stashDB;

option go_package="github.com/Bl4ck-h00d/stashdb/protobuf";


service StashDBService {

    rpc CreateBucket (CreateBucketRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/buckets"
            body: "*"
        };
    }

    rpc Get (GetRequest) returns (GetResponse) {
        option (google.api.http) = {
            get: "/v1/data/{bucket=*}/{key=*}"
        };
    }

    rpc Set (SetRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/data/{bucket=*}"
            body: "*"
        };
    }

    rpc Delete (DeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/data/{bucket=*}/{key=*}"
        };
    }

    rpc GetAllBuckets (google.protobuf.Empty) returns (GetAllBucketsResponse) {
        option (google.api.http) = {
            get: "/v1/buckets"
        };
    }

    rpc GetAllKeys (GetAllKeysRequest) returns (GetAllKeysResponse) {
        option (google.api.http) = {
            get: "/v1/data/{bucket=*}"
        };
    }
}


message CreateBucketRequest {
    string name = 1;
}

message GetRequest {
    string key = 1;
    string bucket=2;
}

message GetResponse {
    bytes value = 1;
}

message SetRequest {
    string key = 1;
    string value = 2;
    string bucket = 3;
}


message DeleteRequest {
    string key = 1;
    string bucket=2;
}

message GetAllBucketsResponse {
    repeated string buckets=1;
}

message GetAllKeysRequest {
    string bucket=1;
    int64 limit=2;
}

message GetAllKeysResponse {
    map<string,bytes> pairs=1;
}
